/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmUsuario.java
 *
 * Created on 02/01/2010, 13:07:26
 */

package sae;
import Classes.*;
import de.hunsicker.jalopy.swing.BracesSettingsPage;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.Security;
import java.sql.Connection;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.*;

import org.apache.axiom.om.OMElement;  
import org.apache.axiom.om.util.AXIOMUtil; 
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXParseException;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.concurrent.ExecutionException;
import javax.rmi.CORBA.Util;
import org.apache.xerces.util.URI;


/**
 *
 * @author Thiago
 */
public class FrmNotaEletronica extends javax.swing.JDialog {
    claVariaveis variaveis = new claVariaveis();
    claAcessoDados AcessoDados = new claAcessoDados();
    claFuncoes funcoes = new claFuncoes();
    Assinador AsinarXML = new Assinador();
    private ResultSet rs, rsTitulos;
    private PrintStream p;
    Connection conn = new claConexao().getConexao();
    

    /** Creates new form FrmUsuario */
    public FrmNotaEletronica(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        funcoes.F_AtribuirClasse(rootPane);
        //MontaTituloColunaGrid();
        MontaGridNota();
        grDados.setDefaultRenderer(Object.class, new TabelaNotaEletronica());
        RetornaLote();
        grDados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lbData.setVisible(false);
        grDados.requestFocus();
        grDados.changeSelection(0, 0, false, false);


    }
    public void RetornaLote()
    {
             try
        {
           rs = AcessoDados.Selecao("nota_fiscal", "max(not_lote) as lote", "");   
           rs.next();
           lbLote.setText(funcoes.StrZero(rs.getInt("lote") + 1, Byte.parseByte("6")));
        
        }catch(Exception e)
        {
            
        }

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rPendentes = new javax.swing.JCheckBox();
        rAutorizadas = new javax.swing.JCheckBox();
        rCanceladas = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        nfNormal = new javax.swing.JCheckBox();
        nfSCAN = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        grDados = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lbLote = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        btnEnviar = new javax.swing.JButton();
        btnRetorno = new javax.swing.JButton();
        btnConsultarStatus = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnCartaCorrecao = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lbData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nota Fiscal Eletrônica");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText("   Gerenciamento de Nota Fiscal Eletrônica");
        jLabel1.setToolTipText("");
        jToolBar1.add(jLabel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo de Nota", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N

        rPendentes.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        rPendentes.setSelected(true);
        rPendentes.setText("Notas Pendentes");
        rPendentes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rPendentesItemStateChanged(evt);
            }
        });
        rPendentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPendentesActionPerformed(evt);
            }
        });

        rAutorizadas.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        rAutorizadas.setText("Notas Autorizadas");
        rAutorizadas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rAutorizadasItemStateChanged(evt);
            }
        });
        rAutorizadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rAutorizadasActionPerformed(evt);
            }
        });

        rCanceladas.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        rCanceladas.setText("Notas Canceladas");
        rCanceladas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rCanceladasItemStateChanged(evt);
            }
        });
        rCanceladas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rCanceladasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(rPendentes)
                .addGap(18, 18, 18)
                .addComponent(rAutorizadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(rCanceladas)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rPendentes)
                    .addComponent(rAutorizadas)
                    .addComponent(rCanceladas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transmissão", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N

        nfNormal.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        nfNormal.setSelected(true);
        nfNormal.setText("Normal");
        nfNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfNormalActionPerformed(evt);
            }
        });

        nfSCAN.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        nfSCAN.setText("Contigência (SCAN)");
        nfSCAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfSCANActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nfNormal)
                .addGap(29, 29, 29)
                .addComponent(nfSCAN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nfNormal)
                    .addComponent(nfSCAN))
                .addContainerGap())
        );

        grDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null, null, null},
                {"", null, null, null, null, null, null},
                {"", null, null, null, null, null, null},
                {"", null, null, null, null, null, null}
            },
            new String [] {
                "Nº Nota", "Cliente", "Chave", "Nº Recibo", "Autorização", "Situação", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grDados.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                grDadosFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(grDados);
        grDados.getColumnModel().getColumn(0).setPreferredWidth(40);
        grDados.getColumnModel().getColumn(1).setResizable(false);
        grDados.getColumnModel().getColumn(1).setPreferredWidth(220);
        grDados.getColumnModel().getColumn(2).setResizable(false);
        grDados.getColumnModel().getColumn(2).setPreferredWidth(260);
        grDados.getColumnModel().getColumn(3).setResizable(false);
        grDados.getColumnModel().getColumn(3).setPreferredWidth(90);
        grDados.getColumnModel().getColumn(4).setResizable(false);
        grDados.getColumnModel().getColumn(4).setPreferredWidth(90);
        grDados.getColumnModel().getColumn(5).setResizable(false);
        grDados.getColumnModel().getColumn(5).setPreferredWidth(160);
        grDados.getColumnModel().getColumn(6).setResizable(false);
        grDados.getColumnModel().getColumn(6).setPreferredWidth(20);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel2.setText("Nº Lote NF-e:");

        lbLote.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        lbLote.setForeground(new java.awt.Color(0, 51, 102));
        lbLote.setText("000001");

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        btnEnviar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        btnEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/novo1.gif"))); // NOI18N
        btnEnviar.setToolTipText("Enviar NF-e");
        btnEnviar.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        btnEnviar.setBorderPainted(false);
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnRetorno.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        btnRetorno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/confirma.gif"))); // NOI18N
        btnRetorno.setToolTipText("Buscar Autorização da NF-e");
        btnRetorno.setBorderPainted(false);
        btnRetorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetornoActionPerformed(evt);
            }
        });

        btnConsultarStatus.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        btnConsultarStatus.setText("Serviço");
        btnConsultarStatus.setToolTipText("Consultar Status Serviço");
        btnConsultarStatus.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        btnConsultarStatus.setBorderPainted(false);
        btnConsultarStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarStatusActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cancelar.gif"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar NF-e");
        btnCancelar.setBorderPainted(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Sair.gif"))); // NOI18N
        btnSair.setToolTipText("Voltar");
        btnSair.setBorderPainted(false);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnCartaCorrecao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/duplicar.gif"))); // NOI18N
        btnCartaCorrecao.setToolTipText("Carta de Correção da NF-e");
        btnCartaCorrecao.setBorderPainted(false);
        btnCartaCorrecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartaCorrecaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRetorno, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCartaCorrecao, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsultarStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
            .addComponent(btnConsultarStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(btnRetorno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(btnCartaCorrecao, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        btnEnviar.getAccessibleContext().setAccessibleDescription("");
        btnConsultarStatus.getAccessibleContext().setAccessibleDescription("20");
        btnCancelar.getAccessibleContext().setAccessibleDescription("20");
        btnSair.getAccessibleContext().setAccessibleDescription("20");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("http://portalnfe.fazenda.mg.gov.br/consultas.html");
        jLabel3.setToolTipText("Selecione uma NF-e e click aqui para abrir o site de consulta. a chave da NF-e já estará na memória bastando apenas que você a cole no campo de consulta.");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        lbData.setText("00/00/0000 00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lbLote)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addComponent(lbData)
                        .addGap(37, 37, 37))))
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbData)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbLote)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    public void RemontaTabelas()
    {

    }
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:.
        variaveis.Linha =  grDados.getValueAt(grDados.getSelectedRow(), 0).toString();

        
        if(grDados.getSelectedRow() == -1)
        {
          JOptionPane.showMessageDialog(null, "Nenhuma nota fiscal foi selecionada." , "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }
        String Protocolo = "";
        try
        {
           Protocolo = grDados.getValueAt(grDados.getSelectedRow(), 4).toString();
        }catch(Exception erro1)
        {
            Protocolo = "";
        }
        
        if(grDados.getValueAt(grDados.getSelectedRow(), 5).toString().equals("Cancelamento de NF-e homologado"))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return; 
        }
        if(!Protocolo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal já Autorizada...." + "\n" + "STATUS DA NOTA NA SEFAZ" + "\n" +  grDados.getValueAt(grDados.getSelectedRow(), 5).toString(), "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        String Recibo = "";
        try
        {
           Recibo = grDados.getValueAt(grDados.getSelectedRow(), 3).toString();
        }catch(Exception erro1)
        {
            Recibo = "";
        }
        if(!Recibo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal já enviada...." + "\n" + "Click em Buscar Autorização da NF-e", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }
        
        try
        {
        rs = AcessoDados.Selecao("nota_fiscal", "*", " where not_codigo_id = " +  grDados.getValueAt(grDados.getSelectedRow(), 0).toString());   
        rs.next();
        
         File arquivo;  
         String Nota = new File("NF-e/" + rs.getString("not_chave_nfe") + "-nfe.xml").getAbsolutePath(); 
         String codigoDoEstado = "31"; // Minas
  
          
         //Adiconar a um lote
            StringBuilder xmlLote = new StringBuilder();  
            String linhaLote = null;  
            BufferedReader inLote = new BufferedReader(new InputStreamReader(  
                    new FileInputStream(Nota), "ISO-8859-1"));  
            while ((linhaLote = inLote.readLine()) != null) {  
                xmlLote.append(linhaLote);  
            }  
            inLote.close();   
            //String Lote= "";//xmlLote.substring(0, 38);            
            String Lote = "<enviNFe xmlns='http://www.portalfiscal.inf.br/nfe' versao='2.00'><idLote>"+lbLote.getText()+"</idLote>";
            //Lote = "<enviNFe xmlns='http://www.portalfiscal.inf.br/nfe' versao='2.00'><idLote>"+lbLote.getText()+"</idLote>";

            //xmlLote.replace(0, 38,"");
            
            
            xmlLote.insert(38, Lote );
            int tamanho = xmlLote.length();
            xmlLote.insert(tamanho, "</enviNFe>" );
            //xmlLote.append("</enviNFe>");


         
         
         /** 
          * Enderecos de Homoloção do Sefaz Virtual RS 
          * para cada WebService existe um endereco Diferente. 
         */  
          URL url = new URL(" https://hnfe.fazenda.mg.gov.br/nfe2/services/NfeRecepcao2");  
              
         String caminhoDoCertificadoDoCliente = "D:/RUBBERPLAST IND COM LTDA.pfx";  
         String senhaDoCertificadoDoCliente = "12345678";  
         String arquivoCacertsGeradoParaCadaEstado = "D:/certificados/nfe.keystore";  
  
         /** 
         * Informações do Certificado Digital. 
        */  
            System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");  
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
  
            System.setProperty("javax.net.ssl.keyStoreType", "PKCS12");  
  
            System.clearProperty("javax.net.ssl.keyStore");  
            System.clearProperty("javax.net.ssl.keyStorePassword");  
            System.clearProperty("javax.net.ssl.trustStore");  
  
            System.setProperty("javax.net.ssl.keyStore", caminhoDoCertificadoDoCliente);  
            System.setProperty("javax.net.ssl.keyStorePassword", senhaDoCertificadoDoCliente);  
  
            System.setProperty("javax.net.ssl.trustStoreType", "JKS");  
            System.setProperty("javax.net.ssl.trustStore", arquivoCacertsGeradoParaCadaEstado);  
  
            /** 
             * IMPORTANTE: O XML já deve ser assinado antes do envio. 
             * Lendo o Xml de um arquivo Gerado. 
             */  
            /*StringBuilder xml = new StringBuilder();  
            String linha = null;  
            BufferedReader in = new BufferedReader(new InputStreamReader(  
                    new FileInputStream(Nota), "ISO-8859-1"));  
            while ((linha = in.readLine()) != null) {  
                xml.append(linha);  
            }  
            in.close();  */
  
            String xmlEnvNFe = xmlLote.toString();  
            OMElement ome = AXIOMUtil.stringToOM(xmlEnvNFe);  
              
            Iterator<?> children = ome.getChildrenWithLocalName("NFe");    
            while (children.hasNext()) {  
                OMElement omElement = (OMElement) children.next();    
                if ((omElement != null) && ("NFe".equals(omElement.getLocalName()))) {    
                    omElement.addAttribute("xmlns", "http://www.portalfiscal.inf.br/nfe", null);    
                }  
            }  
  
            NfeRecepcao2Stub.NfeDadosMsg dadosMsg = new NfeRecepcao2Stub.NfeDadosMsg();  
            dadosMsg.setExtraElement(ome);  
            NfeRecepcao2Stub.NfeCabecMsg nfeCabecMsg = new NfeRecepcao2Stub.NfeCabecMsg();  
            /** 
             * Código do Estado. 
             */  
            nfeCabecMsg.setCUF(codigoDoEstado);  
  
            /** 
             * Versao do XML 
             */  
            nfeCabecMsg.setVersaoDados("2.00");  
  
            NfeRecepcao2Stub.NfeCabecMsgE nfeCabecMsgE = new NfeRecepcao2Stub.NfeCabecMsgE();  
            nfeCabecMsgE.setNfeCabecMsg(nfeCabecMsg);  
  
            NfeRecepcao2Stub stub = new NfeRecepcao2Stub(url.toString());  
            NfeRecepcao2Stub.NfeRecepcaoLote2Result result = stub.nfeRecepcaoLote2(dadosMsg, nfeCabecMsgE);  
 
            org.w3c.dom.Document document; 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            InputSource inStream = new InputSource();  
            inStream.setCharacterStream(new StringReader(result.getExtraElement().toString())); 
            DocumentBuilder builder = null;  
            builder = factory.newDocumentBuilder();  
            builder.setErrorHandler( new SimpleErrorHandler());  
            document = builder.parse(inStream);  
                
            org.w3c.dom.Element elem = document.getDocumentElement();
            org.w3c.dom.NodeList xMotivo = elem.getElementsByTagName("xMotivo");
            org.w3c.dom.NodeList nRec = elem.getElementsByTagName("nRec");
             org.w3c.dom.NodeList nStat = elem.getElementsByTagName("cStat");

                
            String Motivo = xMotivo.item(0).getTextContent();
            String NRecebimetno = nRec.item(0).getTextContent();
            String CStat = nStat.item(0).getTextContent();
            
            variaveis.vmErrosXML = "";
                      
            if(CStat.equals("103"))
            {
            PreparedStatement pstmt = null;
            String sql;
            try
            {
              pstmt = conn.prepareStatement("UPDATE NOTA_FISCAL SET not_numero_recebimento = ?"
                                           + ", not_situacao_nfe = ?, not_lote = ? "
                                           + " WHERE NOT_CODIGO_ID = ? ");
              pstmt.setString(1, NRecebimetno);
              pstmt.setString(2, Motivo);
              pstmt.setInt(3, Integer.parseInt(lbLote.getText()));
              pstmt.setInt(4, Integer.parseInt(grDados.getValueAt(grDados.getSelectedRow(), 0).toString()));
              pstmt.executeUpdate();

              grDados.requestFocus();

            }catch (Exception e) {
              String vm_error = e.getMessage();
              JOptionPane.showMessageDialog(null,"Erro ao gerar XML "+vm_error);
            }
            MontaGridNota();
            RetornaLote();
            }else
            {
                variaveis.vmErrosXML = Motivo;
                FrmErroXmlNota md = new FrmErroXmlNota(null, true);
                md.setLocationRelativeTo(null);
                md.setVisible(true);
                
            }
        
        }catch(Exception e)
        {
            e.printStackTrace();  
            if (e.toString().indexOf("503") >= 0)  JOptionPane.showMessageDialog(null,"Serviço temporariamente indisponível. Tente mais tarde!"); 
           else  
            JOptionPane.showMessageDialog(null,e.toString());
        }
        selecionanota();

        
       
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    
    }//GEN-LAST:event_formWindowActivated

    private void btnConsultarStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarStatusActionPerformed
        // TODO add your handling code here:
          //Esse é o layout para o cabeçalho e rodapé para o Status do Serviço conforme o manual de integração explica  
            try {  
            /** 
             * 1) codigoDoEstado = Código do Estado conforme tabela IBGE. 
             * 
             * 2) url = Endereço do WebService para cada Estado. 
             *       Ver relação dos endereços em: 
             *       Para Homologação: http://hom.nfe.fazenda.gov.br/PORTAL/WebServices.aspx 
             *       Para Produção: http://www.nfe.fazenda.gov.br/portal/WebServices.aspx 
             * 
             * 3) caminhoDoCertificadoDoCliente = Caminho do Certificado do Cliente (A1). 
             * 
             * 4) senhaDoCertificadoDoCliente = Senha do Certificado A1 do Cliente. 
             * 
             * 5) arquivoCacertsGeradoParaCadaEstado = Arquivo com os Certificados necessarios para 
             * acessar o WebService. Pode ser gerado com a Classe NFeBuildCacerts. 
             */  
            String codigoDoEstado = "31";  
            //URL url = new URL("https://homologacao.nfe.sefazvirtual.rs.gov.br/ws/NfeStatusServico/NfeStatusServico2.asmx");  
            URL url = new URL("https://hnfe.fazenda.mg.gov.br/nfe2/services/NfeStatus2");
            String caminhoDoCertificadoDoCliente = "D:/RUBBERPLAST IND COM LTDA.pfx";  
            String senhaDoCertificadoDoCliente = "12345678";  
            String arquivoCacertsGeradoParaCadaEstado = "D:/certificados/nfe.keystore";  
  
             //Provider p = new sun.security.pkcs11.SunPKCS11("C:/nfe.keystore"); // Precisa passar o caminho do token do certificado  
             //Security.addProvider(p);
            
            /** 
             * Informações do Certificado Digital. 
             */  
            System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");  
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
  
            System.setProperty("javax.net.ssl.keyStoreType", "PKCS12");  
  
            System.clearProperty("javax.net.ssl.keyStore");  
            System.clearProperty("javax.net.ssl.keyStorePassword");  
            System.clearProperty("javax.net.ssl.trustStore");  
  
            System.setProperty("javax.net.ssl.keyStore", caminhoDoCertificadoDoCliente);  
            System.setProperty("javax.net.ssl.keyStorePassword", senhaDoCertificadoDoCliente);  
  
            System.setProperty("javax.net.ssl.trustStoreType", "JKS");  
            System.setProperty("javax.net.ssl.trustStore", arquivoCacertsGeradoParaCadaEstado);  
            //System.setProperty("javax.net.ssl.trustStorePassword", "12345678");  
            

            /** 
             * Xml de Consulta. 
             */  
            StringBuilder xml = new StringBuilder();  
            xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")  
                .append("<consStatServ versao=\"2.00\" xmlns=\"http://www.portalfiscal.inf.br/nfe\">")  
                .append("<tpAmb>2</tpAmb>")  
                .append("<cUF>")  
                .append(codigoDoEstado)  
                .append("</cUF>")  
                .append("<xServ>STATUS</xServ>")  
                .append("</consStatServ>");  
  
            OMElement ome = AXIOMUtil.stringToOM(xml.toString());  
            NfeStatusServico2Stub.NfeDadosMsg dadosMsg = new NfeStatusServico2Stub.NfeDadosMsg();  
            dadosMsg.setExtraElement(ome);  
  
            NfeStatusServico2Stub.NfeCabecMsg nfeCabecMsg = new NfeStatusServico2Stub.NfeCabecMsg();  
            /** 
             * Código do Estado. 
             */  
            nfeCabecMsg.setCUF(codigoDoEstado);  
  
            /** 
             * Versao do XML 
             */  
            nfeCabecMsg.setVersaoDados("2.00");  
            NfeStatusServico2Stub.NfeCabecMsgE nfeCabecMsgE = new NfeStatusServico2Stub.NfeCabecMsgE();  
            nfeCabecMsgE.setNfeCabecMsg(nfeCabecMsg);  
  
            NfeStatusServico2Stub stub = new NfeStatusServico2Stub(url.toString());  
            NfeStatusServico2Stub.NfeStatusServicoNF2Result result = stub.nfeStatusServicoNF2(dadosMsg, nfeCabecMsgE);  
  
            System.out.println(result.getExtraElement().toString());  
            
            org.w3c.dom.Document document; 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            InputSource inStream = new InputSource();  
            inStream.setCharacterStream(new StringReader(result.getExtraElement().toString())); 
            DocumentBuilder builder = null;  
            builder = factory.newDocumentBuilder();  
            builder.setErrorHandler( new SimpleErrorHandler());  
            document = builder.parse(inStream);  
                
            org.w3c.dom.Element elem = document.getDocumentElement();
            org.w3c.dom.NodeList d = elem.getElementsByTagName("xMotivo");
                
            String xx = d.item(0).getTextContent();

            JOptionPane.showMessageDialog(null, xx, "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) { 
            
            e.printStackTrace();  
            if (e.toString().indexOf("503") >= 0)  JOptionPane.showMessageDialog(null,"Serviço temporariamente indisponível. Tente mais tarde!"); 
           else  
            JOptionPane.showMessageDialog(null,e.toString());
        }  

      
    }//GEN-LAST:event_btnConsultarStatusActionPerformed
    public class SimpleErrorHandler implements ErrorHandler  
    {  
        public void error(SAXParseException exception) {  
             System.out.println("error: "+ exception.getMessage());  
             //txtRetorno.setText("error: "+exception.getMessage());
         }  
                
         public void fatalError(SAXParseException exception) {  
             System.out.println("fatalError: "+ exception.getMessage());  
             //txtRetorno.setText("fatalError: "+exception.getMessage());
         }  
                
         public void warning(SAXParseException exception) {  
             System.out.println("warning: "+ exception.getMessage());  
             //txtRetorno.setText("warning: "+ exception.getMessage());
         }  
    }  

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        variaveis.Linha =  grDados.getValueAt(grDados.getSelectedRow(), 0).toString();

        if(grDados.getSelectedRow() == -1)
        {
          JOptionPane.showMessageDialog(null, "Nenhuma nota fiscal foi selecionada." , "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        
        if(grDados.getValueAt(grDados.getSelectedRow(), 5).toString().equals("Cancelamento de NF-e homologado"))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal já cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return; 
        }
  
        String Recibo = "";
        try
        {
            Recibo = grDados.getValueAt(grDados.getSelectedRow(), 3).toString();
        }catch(Exception erro1)
        {
            Recibo = "";
        }
        
        if(Recibo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal não foi enviada..." + "\n" + "Click em Enviar NF-e.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        FrmMotivoCancelamento md = new FrmMotivoCancelamento(null, true);
        md.setLocationRelativeTo(null);
        md.setVisible(true);
        String MotivoCanc = (String) md.getRetorno();
        if(MotivoCanc.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Motivo de Cancelamento não informado", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    

        }
        try {  
            /** 
             * 1) codigoDoEstado = Código do Estado conforme tabela IBGE. 
             * 
             * 2) url = Endereço do WebService para cada Estado. 
             *       Ver relação dos endereços em: 
             *       Para Homologação: http://hom.nfe.fazenda.gov.br/PORTAL/WebServices.aspx 
             *       Para Produção: http://www.nfe.fazenda.gov.br/portal/WebServices.aspx 
             * 
             * 3) caminhoDoCertificadoDoCliente = Caminho do Certificado do Cliente (A1). 
             * 
             * 4) senhaDoCertificadoDoCliente = Senha do Certificado A1 do Cliente. 
             * 
             * 5) arquivoCacertsGeradoParaCadaEstado = Arquivo com os Certificados necessarios para 
             * acessar o WebService. Pode ser gerado com a Classe NFeBuildCacerts. 
             * 
             * 6) Chave de Acesso da NFe; 
             */  
            String codigoDoEstado = "31";  
            /** 
             * Enderecos de Homoloção do Sefaz Virtual RS 
             * para cada WebService existe um endereco Diferente. 
             */  
            URL url = new URL("https://hnfe.fazenda.mg.gov.br/nfe2/services/NfeCancelamento2");  
 
            
            String caminhoDoCertificadoDoCliente = "D:/RUBBERPLAST IND COM LTDA.pfx";  
            String senhaDoCertificadoDoCliente = "12345678";  
            String arquivoCacertsGeradoParaCadaEstado = "D:/certificados/nfe.keystore";  


            /** 
             * Informações do Certificado Digital. 
             */  
            System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");  
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
  
            System.setProperty("javax.net.ssl.keyStoreType", "PKCS12");  
  
            System.clearProperty("javax.net.ssl.keyStore");  
            System.clearProperty("javax.net.ssl.keyStorePassword");  
            System.clearProperty("javax.net.ssl.trustStore");  
  
            System.setProperty("javax.net.ssl.keyStore", caminhoDoCertificadoDoCliente);  
            System.setProperty("javax.net.ssl.keyStorePassword", senhaDoCertificadoDoCliente);  
  
            System.setProperty("javax.net.ssl.trustStoreType", "JKS");  
            System.setProperty("javax.net.ssl.trustStore", arquivoCacertsGeradoParaCadaEstado);  
  
            /** 
            * Xml de Consulta. 
            */  
                      
         
            StringBuilder xml = new StringBuilder();  
            xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")  
                .append("<cancNFe versao=\"2.00\" xmlns=\"http://www.portalfiscal.inf.br/nfe\">")  
                .append("<infCanc Id=\"ID"+grDados.getValueAt(grDados.getSelectedRow(), 2).toString()+"\">") //tratar
                .append("<tpAmb>2</tpAmb>") 
                .append("<xServ>CANCELAR</xServ>")
                .append("<chNFe>"+grDados.getValueAt(grDados.getSelectedRow(), 2).toString()+"</chNFe>")
                .append("<nProt>"+grDados.getValueAt(grDados.getSelectedRow(), 4).toString()+"</nProt>")  
                .append("<xJust>"+MotivoCanc+"</xJust>")
                .append("</infCanc>")
                .append("</cancNFe>");
                 
             String NotaCancelada = "";
             try
            {
               NotaCancelada = new File("NF-e/" + grDados.getValueAt(grDados.getSelectedRow(), 2).toString() +"canc-nfe.xml").getAbsolutePath(); 
               File arquivo;  
               arquivo = new File(NotaCancelada);
               FileOutputStream fos = new FileOutputStream(arquivo);
               String texto = xml.toString();
               fos.write(texto.getBytes());
               fos.close();  
               
            }catch(Exception exerr)
            {
                variaveis.vmErrosXML = "Erro ao gerar arquivo XML da nota.";
            }
  
            AsinarXML.assinar(NotaCancelada, "D:/RUBBERPLAST IND COM LTDA.pfx", "12345678", NotaCancelada, "2");
            
            StringBuilder xmlassinado = new StringBuilder();  
            String linha = null;  
            String caminhoArquivo = NotaCancelada;  
            BufferedReader in = new BufferedReader(new InputStreamReader(  
                    new FileInputStream(caminhoArquivo), "ISO-8859-1"));  
            while ((linha = in.readLine()) != null) {  
                xmlassinado.append(linha);  
            }  
            in.close();  
             
             
           OMElement ome = AXIOMUtil.stringToOM(xmlassinado.toString());  
            NfeCancelamento2Stub.NfeDadosMsg dadosMsg = new NfeCancelamento2Stub.NfeDadosMsg(); 
            dadosMsg.setExtraElement(ome);  
  
           NfeCancelamento2Stub.NfeCabecMsg nfeCabecMsg = new NfeCancelamento2Stub.NfeCabecMsg();   
            /** 
             * Código do Estado. 
             */  
            nfeCabecMsg.setCUF(codigoDoEstado);  
  
            /** 
             * Versão do XML 
             */  
            nfeCabecMsg.setVersaoDados("2.00");  
  
            NfeCancelamento2Stub.NfeCabecMsgE nfeCabecMsgE = new NfeCancelamento2Stub.NfeCabecMsgE();  
            nfeCabecMsgE.setNfeCabecMsg(nfeCabecMsg);  
  
            NfeCancelamento2Stub stub = new NfeCancelamento2Stub(url.toString());  
            NfeCancelamento2Stub.NfeCancelamentoNF2Result result = stub.nfeCancelamentoNF2(dadosMsg, nfeCabecMsgE); 
  

            org.w3c.dom.Document document; 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            InputSource inStream = new InputSource();  
            inStream.setCharacterStream(new StringReader(result.getExtraElement().toString())); 
            DocumentBuilder builder = null;  
            builder = factory.newDocumentBuilder();  
            builder.setErrorHandler( new SimpleErrorHandler());  
            document = builder.parse(inStream);  
             
            String NRecebimetno = result.getExtraElement().toString();
            org.w3c.dom.Element elem = document.getDocumentElement();
            org.w3c.dom.NodeList xMotivo = elem.getElementsByTagName("xMotivo");
            org.w3c.dom.NodeList nRec = elem.getElementsByTagName("nProt");
            org.w3c.dom.NodeList nStat = elem.getElementsByTagName("cStat");
            
    
            String Motivo = xMotivo.item(0).getTextContent();
            String CStat = nStat.item(0).getTextContent();
            try{
            NRecebimetno = nRec.item(0).getTextContent();
            }catch(Exception erro)
            {
                
            }
            variaveis.vmErrosXML = "";
            if(CStat.equals("101"))
            {
            PreparedStatement pstmt = null;
            String sql;
            try
            {
              pstmt = conn.prepareStatement("UPDATE NOTA_FISCAL SET not_protocolo_nfe = ?"
                                           + ", not_situacao_nfe = ? , not_xml_cancelamento = ?, not_data_cancelamento = ? "
                                           + " WHERE NOT_CODIGO_ID = ? ");
              pstmt.setString(1, NRecebimetno);
              pstmt.setString(2, Motivo);
              pstmt.setString(3, result.getExtraElement().toString());
              Date data = new Date(System.currentTimeMillis());
              SimpleDateFormat formatarDate = new SimpleDateFormat("dd/MM/yyyy");
              pstmt.setString(4, formatarDate.format(data));
              pstmt.setInt(5, Integer.parseInt(grDados.getValueAt(grDados.getSelectedRow(), 0).toString()));
              pstmt.executeUpdate();
              CancelarFaturamento();
              rAutorizadas.setSelected(false);
              rCanceladas.setSelected(true);


            }catch (Exception e) {
              String vm_error = e.getMessage();
              JOptionPane.showMessageDialog(null,"Erro ao gerar XML "+vm_error);
            }
            MontaGridNota();
            }else
            {
                variaveis.vmErrosXML = Motivo;
                FrmErroXmlNota mds = new FrmErroXmlNota(null, true);
                mds.setLocationRelativeTo(null);
                mds.setVisible(true);
                PreparedStatement pstmt = null;
                String sql;
                                    
            }

            
  
        } catch (Exception e) {  
            e.printStackTrace();  
            if (e.toString().indexOf("503") >= 0)  JOptionPane.showMessageDialog(null,"Serviço temporariamente indisponível. Tente mais tarde!"); 
           else  
            JOptionPane.showMessageDialog(null,e.toString());
        }  
        selecionanota();


    }//GEN-LAST:event_btnCancelarActionPerformed
    public void CancelarFaturamento(){
    String Nnota = grDados.getValueAt(grDados.getSelectedRow(), 0).toString();
    try
        {
        String Campos = "*";
        String Condicoes = " INNER JOIN RECEBIMENTO_CONTAS_RECEBER ON (CR_CODIGO_ID = rcr_cr_codigo_id) WHERE CR_NOTA_FISCAL = " + Nnota;
        rs = AcessoDados.Selecao("CONTAS_RECEBER", Campos, Condicoes);
        if(rs.next())
        {
            JOptionPane.showMessageDialog(null,"Existem recebimentos contas receber para esse pedido. Cancelamento não permitido.");
            return;
        }
        }catch (Exception e) {
            e.printStackTrace();
        }


            try
            {
             rs = AcessoDados.Selecao("nota_fiscal", "not_chave_nfe, not_numero_recebimento, not_situacao_nfe", " where not_codigo_id = " + Nnota);
             rs.next();
             String Nota = new File("NF-e/" + rs.getString("not_chave_nfe") +"-nfe.xml").getAbsolutePath(); 
             
             File arquivo;  
             arquivo = new File(Nota);
             arquivo.delete();
            }catch(Exception exerr)
            {
    
            }
            
            try
            {
               
            //String  vmCondicaoItem = " not_codigo_id = " + Nnota;
            //AcessoDados.Excluir("nota_fiscal", vmCondicaoItem);

            String  vmCondicao = "cr_nota_fiscal = " + Nnota;
            AcessoDados.Excluir("contas_receber", vmCondicao);

            String  vmCondicaoCC = "cc_nota = " + Nnota;
            AcessoDados.Excluir("contas_corrente", vmCondicaoCC);

            //Atualizar Tabela de Pedidos
            String vmCampos_Parametros = " ped_tipo_pedido = 'C - Cancelado'";
                                         

            String vmCondicao_Alteracao =" ped_numero_nota_fiscal = " + Nnota ;

            AcessoDados.Alterar("pedidos", vmCampos_Parametros, vmCondicao_Alteracao);
            
          

            }catch (Exception e) {
                e.printStackTrace();
            }
}
    
    private void btnRetornoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetornoActionPerformed
        // TODO add your handling code here:
        variaveis.Linha =  grDados.getValueAt(grDados.getSelectedRow(), 0).toString();

        if(grDados.getSelectedRow() == -1)
        {
          JOptionPane.showMessageDialog(null, "Nenhuma nota fiscal foi selecionada." , "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        String Recibo = "";
        try
        {
            Recibo = grDados.getValueAt(grDados.getSelectedRow(), 3).toString();
        }catch(Exception erro1)
        {
            Recibo = "";
        }
        
        if(Recibo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal não foi enviada..." + "\n" + "Click em Enviar NF-e.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        if(grDados.getValueAt(grDados.getSelectedRow(), 5).toString().equals("Cancelamento de NF-e homologado"))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return; 
        }
        String Protocolo= "";
        try
        {
            Protocolo = grDados.getValueAt(grDados.getSelectedRow(), 4).toString();
        }catch(Exception erro1)
        {
            Protocolo = "";
        }
        
        if(!Protocolo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal já Autorizada..." + "\n" + "Consulte a NF-e no Site da SEFAZ pelo número da CHAVE da NF-e.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        try {  
            /** 
             * 1) codigoDoEstado = Código do Estado conforme tabela IBGE. 
             * 
             * 2) url = Endereço do WebService para cada Estado. 
             *       Ver relação dos endereços em: 
             *       Para Homologação: http://hom.nfe.fazenda.gov.br/PORTAL/WebServices.aspx 
             *       Para Produção: http://www.nfe.fazenda.gov.br/portal/WebServices.aspx 
             * 
             * 3) caminhoDoCertificadoDoCliente = Caminho do Certificado do Cliente (A1). 
             * 
             * 4) senhaDoCertificadoDoCliente = Senha do Certificado A1 do Cliente. 
             * 
             * 5) arquivoCacertsGeradoParaCadaEstado = Arquivo com os Certificados necessarios para 
             * acessar o WebService. Pode ser gerado com a Classe NFeBuildCacerts. 
             * 
             * 6) Chave de Acesso da NFe; 
             */  
            String codigoDoEstado = "31";  
            /** 
             * Enderecos de Homoloção do Sefaz Virtual RS 
             * para cada WebService existe um endereco Diferente. 
             */  
            URL url = new URL("https://hnfe.fazenda.mg.gov.br/nfe2/services/NfeRetRecepcao2");  
 
            
            String caminhoDoCertificadoDoCliente = "D:/RUBBERPLAST IND COM LTDA.pfx";  
            String senhaDoCertificadoDoCliente = "12345678";  
            String arquivoCacertsGeradoParaCadaEstado = "D:/certificados/nfe.keystore";  


            /** 
             * Informações do Certificado Digital. 
             */  
            System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");  
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
  
            System.setProperty("javax.net.ssl.keyStoreType", "PKCS12");  
  
            System.clearProperty("javax.net.ssl.keyStore");  
            System.clearProperty("javax.net.ssl.keyStorePassword");  
            System.clearProperty("javax.net.ssl.trustStore");  
  
            System.setProperty("javax.net.ssl.keyStore", caminhoDoCertificadoDoCliente);  
            System.setProperty("javax.net.ssl.keyStorePassword", senhaDoCertificadoDoCliente);  
  
            System.setProperty("javax.net.ssl.trustStoreType", "JKS");  
            System.setProperty("javax.net.ssl.trustStore", arquivoCacertsGeradoParaCadaEstado);  
  
            /** 
            * Xml de Consulta. 
            */  
            StringBuilder xml = new StringBuilder();  
            xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")  
                .append("<consReciNFe versao=\"2.00\" xmlns=\"http://www.portalfiscal.inf.br/nfe\">")  
                .append("<tpAmb>2</tpAmb>")  
                .append("<nRec>")  
                .append(grDados.getValueAt(grDados.getSelectedRow(), 3).toString())  
                .append("</nRec>")  
                .append("</consReciNFe>");  
  
            OMElement ome = AXIOMUtil.stringToOM(xml.toString());  
            NfeRetRecepcao2Stub.NfeDadosMsg dadosMsg = new NfeRetRecepcao2Stub.NfeDadosMsg();  
            dadosMsg.setExtraElement(ome);  
  
            NfeRetRecepcao2Stub.NfeCabecMsg nfeCabecMsg = new NfeRetRecepcao2Stub.NfeCabecMsg();  
            /** 
             * Código do Estado. 
             */  
            nfeCabecMsg.setCUF(codigoDoEstado);  
  
            /** 
             * Versão do XML 
             */  
            nfeCabecMsg.setVersaoDados("2.00");  
  
            NfeRetRecepcao2Stub.NfeCabecMsgE nfeCabecMsgE = new NfeRetRecepcao2Stub.NfeCabecMsgE();  
            nfeCabecMsgE.setNfeCabecMsg(nfeCabecMsg);  
  
            NfeRetRecepcao2Stub stub = new NfeRetRecepcao2Stub(url.toString());  
            NfeRetRecepcao2Stub.NfeRetRecepcao2Result result = stub.nfeRetRecepcao2(dadosMsg, nfeCabecMsgE);  
  

            org.w3c.dom.Document document; 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            InputSource inStream = new InputSource();  
            inStream.setCharacterStream(new StringReader(result.getExtraElement().toString())); 
            DocumentBuilder builder = null;  
            builder = factory.newDocumentBuilder();  
            builder.setErrorHandler( new SimpleErrorHandler());  
            document = builder.parse(inStream);  
               
            org.w3c.dom.Element elem = document.getDocumentElement();
            org.w3c.dom.NodeList xMotivo = elem.getElementsByTagName("xMotivo");
            org.w3c.dom.NodeList nRec = elem.getElementsByTagName("nProt");
            org.w3c.dom.NodeList nStat = elem.getElementsByTagName("cStat");
            
            String NRecebimetno ="";    
            String Motivo = xMotivo.item(1).getTextContent();
            String CStat = nStat.item(1).getTextContent();
            try{
            NRecebimetno = nRec.item(0).getTextContent();
            }catch(Exception erro)
            {
                
            }
            variaveis.vmErrosXML = "";
            if(CStat.equals("100"))
            {
            PreparedStatement pstmt = null;
            String sql;
            try
            {
              pstmt = conn.prepareStatement("UPDATE NOTA_FISCAL SET not_protocolo_nfe = ?"
                                           + ", not_situacao_nfe = ?  "
                                           + " WHERE NOT_CODIGO_ID = ? ");
              pstmt.setString(1, NRecebimetno);
              pstmt.setString(2, Motivo);
              pstmt.setInt(3, Integer.parseInt(grDados.getValueAt(grDados.getSelectedRow(), 0).toString()));
              pstmt.executeUpdate();
              rPendentes.setSelected(false);
              rAutorizadas.setSelected(true);

            }catch (Exception e) {
              String vm_error = e.getMessage();
              JOptionPane.showMessageDialog(null,"Erro ao gerar XML "+vm_error);
            }
            MontaGridNota();
            }else
            {
                variaveis.vmErrosXML = Motivo;
                FrmErroXmlNota md = new FrmErroXmlNota(null, true);
                md.setLocationRelativeTo(null);
                md.setVisible(true);
                PreparedStatement pstmt = null;
                String sql;
                try
                {
                   pstmt = conn.prepareStatement("UPDATE NOTA_FISCAL SET not_numero_recebimento = ?"
                                            + ", not_situacao_nfe = ? "
                                             + " WHERE NOT_CODIGO_ID = ? ");
                   pstmt.setString(1, "");
                   pstmt.setString(2, "Aguardando Envio");
                   pstmt.setInt(3, Integer.parseInt(grDados.getValueAt(grDados.getSelectedRow(), 0).toString()));
                   pstmt.executeUpdate();

               }catch (Exception e) {
                  String vm_error = e.getMessage();
                  JOptionPane.showMessageDialog(null,"Erro ao gerar XML "+vm_error);
               }
               MontaGridNota();
                    
            }

            
  
        } catch (Exception e) {  
           e.printStackTrace();  
            if (e.toString().indexOf("503") >= 0)  JOptionPane.showMessageDialog(null,"Serviço temporariamente indisponível. Tente mais tarde!"); 
           else  
            JOptionPane.showMessageDialog(null,e.toString()); 
        }  
        selecionanota();

    }//GEN-LAST:event_btnRetornoActionPerformed

    private void btnCartaCorrecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartaCorrecaoActionPerformed
        // TODO add your handling code here:
        variaveis.Linha =  grDados.getValueAt(grDados.getSelectedRow(), 0).toString();

        if(grDados.getSelectedRow() == -1)
        {
          JOptionPane.showMessageDialog(null, "Nenhuma nota fiscal foi selecionada." , "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        
        if(grDados.getValueAt(grDados.getSelectedRow(), 5).toString().equals("Cancelamento de NF-e homologado"))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return; 
        }
  
        String Recibo = "";
        try
        {
            Recibo = grDados.getValueAt(grDados.getSelectedRow(), 3).toString();
        }catch(Exception erro1)
        {
            Recibo = "";
        }
        
        if(Recibo.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Nota Fiscal não foi enviada..." + "\n" + "Click em Enviar NF-e.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }

        FrmCartaCorrecao md = new FrmCartaCorrecao(null, true);
        md.setLocationRelativeTo(null);
        md.setVisible(true);
        String MotivoCorrecao = (String) md.getRetorno();
        if(MotivoCorrecao.equals(""))
        {
          JOptionPane.showMessageDialog(null, "Carta de correção inválida", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    

        }       
        try {  
            /** 
             * 1) codigoDoEstado = Código do Estado conforme tabela IBGE. 
             * 
             * 2) url = Endereço do WebService para cada Estado. 
             *       Ver relação dos endereços em: 
             *       Para Homologação: http://hom.nfe.fazenda.gov.br/PORTAL/WebServices.aspx 
             *       Para Produção: http://www.nfe.fazenda.gov.br/portal/WebServices.aspx 
             * 
             * 3) caminhoDoCertificadoDoCliente = Caminho do Certificado do Cliente (A1). 
             * 
             * 4) senhaDoCertificadoDoCliente = Senha do Certificado A1 do Cliente. 
             * 
             * 5) arquivoCacertsGeradoParaCadaEstado = Arquivo com os Certificados necessarios para 
             * acessar o WebService. Pode ser gerado com a Classe NFeBuildCacerts. 
             * 
             * 6) Chave de Acesso da NFe; 
             */  
            String codigoDoEstado = "31";  
            /** 
             * Enderecos de Homoloção do Sefaz Virtual RS 
             * para cada WebService existe um endereco Diferente. 
             */  
            URL url = new URL("https://hnfe.fazenda.mg.gov.br/nfe2/services/RecepcaoEvento");  
 
            
            String caminhoDoCertificadoDoCliente = "D:/RUBBERPLAST IND COM LTDA.pfx";  
            String senhaDoCertificadoDoCliente = "12345678";  
            String arquivoCacertsGeradoParaCadaEstado = "D:/certificados/nfe.keystore";  


            /** 
             * Informações do Certificado Digital. 
             */  
            System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");  
            Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
  
            System.setProperty("javax.net.ssl.keyStoreType", "PKCS12");  
  
            System.clearProperty("javax.net.ssl.keyStore");  
            System.clearProperty("javax.net.ssl.keyStorePassword");  
            System.clearProperty("javax.net.ssl.trustStore");  
  
            System.setProperty("javax.net.ssl.keyStore", caminhoDoCertificadoDoCliente);  
            System.setProperty("javax.net.ssl.keyStorePassword", senhaDoCertificadoDoCliente);  
  
            System.setProperty("javax.net.ssl.trustStoreType", "JKS");  
            System.setProperty("javax.net.ssl.trustStore", arquivoCacertsGeradoParaCadaEstado);  
  
            /** 
            * Xml de Consulta. 
            */  
            Date data = new Date(System.currentTimeMillis());
            SimpleDateFormat formatarDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            lbData.setText(formatarDate.format(data)) ;
            lbData.requestFocus();
            lbData.setVisible(false);
                      
         
            StringBuilder xml = new StringBuilder();  
            xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            //xml.append("<envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"1.00\">");
            //xml.append("<idLote>00000001319901</idLote>");
            xml.append("<evento xmlns=\"http://www.portalfiscal.inf.br/nfe\" versao=\"1.00\">");
            xml.append("<infEvento Id=\"ID"+grDados.getValueAt(grDados.getSelectedRow(), 2).toString()+"\">");
            xml.append("  <cOrgao>"+codigoDoEstado+"</cOrgao>");
            xml.append("  <tpAmb>2</tpAmb>"); //Homologação
            xml.append(" <CNPJ>"+funcoes.RemoveCaracter(variaveis.CNPJ)+"</CNPJ>");
            xml.append(" <chNFe>"+grDados.getValueAt(grDados.getSelectedRow(), 2).toString()+"</chNFe>");
            xml.append(" <dhEvento>"+lbData.getText()+"</dhEvento>");
            xml.append(" <tpEvento>110110</tpEvento>");
            xml.append(" <nSeqEvento>1</nSeqEvento>");
            xml.append("  <verEvento>1.00</verEvento>");
            xml.append("<detEvento versao=\"1.00\">");
            xml.append("<descEvento>Carta de Correção</descEvento>");
            xml.append("<xCorrecao>"+MotivoCorrecao+"</xCorrecao>");
            xml.append("<xCondUso>A Carta de Correção é disciplinada pelo § 1º-A do art. 7º do "
                    + "Convênio S/N, de 15 de dezembro de 1970 e pode ser utilizada "
                    + "para regularização de erro ocorrido na emissão de documento fiscal, "
                    + "desde que o erro não esteja relacionado com: I - as "
                    + "variáveis que determinam o valor do imposto tais como: "
                    + "base de cálculo, alíquota, diferença de preço, "
                    + "quantidade, valor da operação ou da prestação; II - a "
                    + "correção de dados cadastrais que implique mudança do remetente ou "
                    + "do destinatário; III - a data de emissão ou de saída.</xCondUso>");
            xml.append("</detEvento>");
            xml.append("</infEvento>");
            xml.append("</evento>");
            //xml.append("</envEvento>");
            
                
             String NotaCorrecao = "";
             try
            {
               NotaCorrecao = new File("NF-e/" + grDados.getValueAt(grDados.getSelectedRow(), 2).toString() +"cartacorrecao-nfe.xml").getAbsolutePath(); 
               File arquivo;  
               arquivo = new File(NotaCorrecao);
               FileOutputStream fos = new FileOutputStream(arquivo);
               String texto = xml.toString();
               fos.write(texto.getBytes());
               fos.close();  
               
            }catch(Exception exerr)
            {
                variaveis.vmErrosXML = "Erro ao gerar arquivo XML da carta.";
            }
  
            AsinarXML.assinar(NotaCorrecao, "D:/RUBBERPLAST IND COM LTDA.pfx", "12345678", NotaCorrecao, "4");
            
            StringBuilder xmlassinado = new StringBuilder();  
            String linha = null;  
            String caminhoArquivo = NotaCorrecao;  
            BufferedReader in = new BufferedReader(new InputStreamReader(  
                    new FileInputStream(caminhoArquivo), "ISO-8859-1"));  
            while ((linha = in.readLine()) != null) {  
                xmlassinado.append(linha);  
            }  
            in.close();  
             
             
           OMElement ome = AXIOMUtil.stringToOM(xmlassinado.toString());  
            
           
            //RecepcaoEventoStub.NfeDadosMsg dadosMsg = new RecepcaoEventoStub.NfeDadosMsg();  
            //dadosMsg.setExtraElement(ome);  
            //RecepcaoEventoStub.NfeCabecMsg nfeCabecMsg = new RecepcaoEventoStub.NfeCabecMsg();  
  
            /** 
             * Código do Estado. 
             */  
            //nfeCabecMsg.setCUF(codigoDoEstado);  
  
            /** 
             * Versao do XML 
             */  
            //nfeCabecMsg.setVersaoDados("1.00");  
  
            //RecepcaoEventoStub.NfeCabecMsgE nfeCabecMsgE = new RecepcaoEventoStub.NfeCabecMsgE();  
            //nfeCabecMsgE.setNfeCabecMsg(nfeCabecMsg);  
  
            //RecepcaoEventoStub stub = new RecepcaoEventoStub(url.toString());  
            //RecepcaoEventoStub.NfeRecepcaoEventoResult result = stub.nfeRecepcaoEvento(dadosMsg, nfeCabecMsgE);    

            
            
            org.w3c.dom.Document document; 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            InputSource inStream = new InputSource();  
            //inStream.setCharacterStream(new StringReader(result.getExtraElement().toString())); 
            DocumentBuilder builder = null;  
            builder = factory.newDocumentBuilder();  
            builder.setErrorHandler( new SimpleErrorHandler());  
            document = builder.parse(inStream);  
             
            //String NRecebimetno = result.getExtraElement().toString();
            org.w3c.dom.Element elem = document.getDocumentElement();
            org.w3c.dom.NodeList xMotivo = elem.getElementsByTagName("xMotivo");
            org.w3c.dom.NodeList nRec = elem.getElementsByTagName("nProt");
            org.w3c.dom.NodeList nStat = elem.getElementsByTagName("cStat");
            
    
            String Motivo = xMotivo.item(0).getTextContent();
            String CStat = nStat.item(0).getTextContent();
            try{
            //NRecebimetno = nRec.item(0).getTextContent();
            }catch(Exception erro)
            {
                
            }
            variaveis.vmErrosXML = "";
            if(CStat.equals("101"))
            {
            PreparedStatement pstmt = null;
            String sql;
            try
            {
              pstmt = conn.prepareStatement("UPDATE NOTA_FISCAL SET not_protocolo_nfe = ?"
                                           + ", not_situacao_nfe = ? , not_xml_cancelamento = ? "
                                           + " WHERE NOT_CODIGO_ID = ? ");
              //pstmt.setString(1, NRecebimetno);
              pstmt.setString(2, Motivo);
              //pstmt.setString(3, result.getExtraElement().toString());
              pstmt.setInt(4, Integer.parseInt(grDados.getValueAt(grDados.getSelectedRow(), 0).toString()));
              pstmt.executeUpdate();

            }catch (Exception e) {
              String vm_error = e.getMessage();
              JOptionPane.showMessageDialog(null,"Erro ao gerar XML "+vm_error);
            }
            MontaGridNota();
            }else
            {
                variaveis.vmErrosXML = Motivo;
                FrmErroXmlNota mds = new FrmErroXmlNota(null, true);
                mds.setLocationRelativeTo(null);
                mds.setVisible(true);
                PreparedStatement pstmt = null;
                String sql;
                                    
            }

            
  
        } catch (Exception e) {  
            e.printStackTrace();  
            if (e.toString().indexOf("503") >= 0)  JOptionPane.showMessageDialog(null,"Serviço temporariamente indisponível. Tente mais tarde!"); 
           else  
            JOptionPane.showMessageDialog(null,e.toString());
        }  
        selecionanota();
    
    }//GEN-LAST:event_btnCartaCorrecaoActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        if(grDados.getSelectedRow() == -1)
        {
          JOptionPane.showMessageDialog(null, "Selecione uma nota para consultar!" , "Aviso", JOptionPane.INFORMATION_MESSAGE);  
          return;    
        }
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();  
        String text = grDados.getValueAt(grDados.getSelectedRow(), 2).toString() ;  
        StringSelection selection = new StringSelection(text);  
        clipboard.setContents(selection, null);  
        
        Desktop desktop = null;  
        desktop = Desktop.getDesktop();  
        java.net.URI uri = null;  
        try {  
            uri = new java.net.URI(jLabel3.getText());  
            desktop.browse(uri); 
            }  
              catch(IOException ioe) {  
               ioe.printStackTrace();  
            }  
        catch(URISyntaxException use) {  
            use.printStackTrace();  
 }  
              
    }//GEN-LAST:event_jLabel3MouseClicked
  public void selecionanota()
  {
       for(int i = 0; i <= grDados.getRowCount() -1; i++)
       {
           if(grDados.getValueAt(i, 0).toString().equals(variaveis.Linha))
           {
             
               grDados.changeSelection(i, 0, false, false); 
               break;
           }
       }

  }
    private void grDadosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_grDadosFocusGained
        // TODO add your handling code here:
        
        //grDados.changeSelection(Linha, 0, false, false); 
      //grDados.addRowSelectionInterval(0,0);

    }//GEN-LAST:event_grDadosFocusGained

    private void rPendentesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rPendentesItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_rPendentesItemStateChanged

    private void rAutorizadasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rAutorizadasItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_rAutorizadasItemStateChanged

    private void rCanceladasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rCanceladasItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_rCanceladasItemStateChanged

    private void rPendentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPendentesActionPerformed
        // TODO add your handling code here:
        rCanceladas.setSelected(false);
        rAutorizadas.setSelected(false);
        MontaGridNota();

    }//GEN-LAST:event_rPendentesActionPerformed

    private void rAutorizadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rAutorizadasActionPerformed
        // TODO add your handling code here:
        rCanceladas.setSelected(false);
        rPendentes.setSelected(false);
        MontaGridNota();

    }//GEN-LAST:event_rAutorizadasActionPerformed

    private void rCanceladasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rCanceladasActionPerformed
        // TODO add your handling code here:
        rPendentes.setSelected(false);
        rAutorizadas.setSelected(false);
        MontaGridNota();

    }//GEN-LAST:event_rCanceladasActionPerformed

    private void nfNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nfNormalActionPerformed
        // TODO add your handling code here:
        nfSCAN.setSelected(false);
    }//GEN-LAST:event_nfNormalActionPerformed

    private void nfSCANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nfSCANActionPerformed
        // TODO add your handling code here:
        nfNormal.setSelected(false);
    }//GEN-LAST:event_nfSCANActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
      
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmNotaEletronica dialog = new FrmNotaEletronica(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

        public void MontaTituloColunaGrid()
    {
        grDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {"Nº Nota","Cliente","Valor","Chave","Protocolo","Situação","",""
            }) { boolean[]  canEdit = new boolean [] {
                false, false,false,false,false,false,true, true
            };
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        grDados.getColumnModel().getColumn(0).setPreferredWidth(20);
        grDados.getColumnModel().getColumn(1).setPreferredWidth(180);
        grDados.getColumnModel().getColumn(2).setPreferredWidth(60);
        grDados.getColumnModel().getColumn(3).setPreferredWidth(250);
        grDados.getColumnModel().getColumn(4).setPreferredWidth(110);
        grDados.getColumnModel().getColumn(5).setPreferredWidth(120);
        grDados.getColumnModel().getColumn(6).setPreferredWidth(20);
        grDados.getColumnModel().getColumn(7).setPreferredWidth(20);

        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();

        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);

        ButtonColumn buttonColumn = new ButtonColumn(grDados, 6);

    }

    public void MontaGridNota()
    {
        DefaultTableModel tableModel =(DefaultTableModel) grDados.getModel();
        tableModel.setNumRows(0);

        ButtonColumn buttonColumn = new ButtonColumn(grDados, 6);
        String vmCampos = " "+
                          "ped_numero_nota_fiscal,"+
                          "par_nome_razao_social,"+
                          "not_numero_recebimento,"+
                          "not_chave_nfe,"+
                          "not_protocolo_nfe,"+
                          "not_situacao_nfe";

        String vmCondicao_Consulta = "  LEFT JOIN PARCEIROS   ON (par_codigo_id =   ped_par_codigo_id ) "+
                                     "  LEFT JOIN nota_fiscal ON (not_codigo_id =   ped_numero_nota_fiscal )"+
                                     "  WHERE PED_NUMERO_NOTA_FISCAL > 0 ";
        if(rAutorizadas.isSelected())
        {
            vmCondicao_Consulta += "  AND not_situacao_nfe = 'Autorizado o uso da NF-e'";
        }

        if(rCanceladas.isSelected())
        {
            vmCondicao_Consulta += "  AND not_situacao_nfe = 'Cancelamento de NF-e homologado'";
        }

        if(rPendentes.isSelected())
        {
            vmCondicao_Consulta += "  AND not_situacao_nfe = 'Aguardando Envio' or not_situacao_nfe = 'Lote recebido com sucesso' ";
        }
        
        vmCondicao_Consulta += " order by not_codigo_id desc ";
        try
        {
        rs = AcessoDados.Selecao("PEDIDOS", vmCampos, vmCondicao_Consulta);
        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel)grDados.getModel();
        while (rs.next())
        {
            dtm.addRow(new Object[]{rs.getString("ped_numero_nota_fiscal"),
                                    rs.getString("par_nome_razao_social"),
                                    rs.getString("not_chave_nfe"),
                                    rs.getString("not_numero_recebimento"),
                                    rs.getString("not_protocolo_nfe"),
                                    rs.getString("not_situacao_nfe"),
                                    ""});
        }
        rs.close();

         }catch (Exception e) {

         }
         selecionanota();
    }
 
   class ButtonColumn extends AbstractCellEditor
        implements TableCellRenderer, TableCellEditor, ActionListener
    {
        JTable table;
        JButton renderButton;
        JButton renderButton1;
        JButton editButton;
        Icon imgExcluir;
        String text;

        public ButtonColumn(JTable table, int column)
        {
            super();
            //btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Localizar.gif")));;;
            this.table = table;


            imgExcluir = new ImageIcon("..MTDS/Imagens/Imprimir.gif");
            renderButton = new JButton(imgExcluir);
            renderButton.setBorderPainted(false);
            renderButton.setToolTipText("Imprimir Danfe");
            renderButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
            renderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Imprimir.gif")));

            editButton = new JButton();
            editButton.setFocusPainted( false );
            editButton.addActionListener( this );
            editButton.setBorderPainted(false);
            editButton.setToolTipText("Imprimir Danfe");
            editButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
            editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Imprimir.gif")));


            TableColumnModel columnModel = table.getColumnModel();
            columnModel.getColumn(column).setCellRenderer( this );
            columnModel.getColumn(column).setCellEditor( this );
        }

        public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            if (hasFocus)
            {
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }
            else if (isSelected)
            {
                renderButton.setForeground(table.getSelectionForeground());
                 renderButton.setBackground(table.getSelectionBackground());
            }
            else
            {
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }

            renderButton.setText( (value == "") ? "" : value.toString() );
            return renderButton;
        }

        public Component getTableCellEditorComponent(
            JTable table, Object value, boolean isSelected, int row, int column)
        {
            text = (value == "") ? "" : value.toString();
            editButton.setText( text );
            return editButton;
        }

        public Object getCellEditorValue()
        {
            return text;
        }

        public void actionPerformed(ActionEvent e)
        {
            fireEditingStopped();
            String Protocolo= "";
            try
            {
               Protocolo = grDados.getValueAt(grDados.getSelectedRow(), 4).toString();
            }catch(Exception erro1)
            {
               Protocolo = "";
            }
        
            if(Protocolo.equals(""))
            {
              JOptionPane.showMessageDialog(null, "Nota Fiscal sem protocolo de autorização..." + "\n" + "Impressão do DANFE não permitida.", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
              return;    
            }
            if(grDados.getValueAt(grDados.getSelectedRow(), 5).toString().equals("Cancelamento de NF-e homologado"))
            {
              JOptionPane.showMessageDialog(null, "Nota Fiscal Cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);  
              return; 
            }

            Danfe();
            //dispose();
        }
    }
   public void Danfe()
   {
       //if(txtChaveNFE.getText().equals(""))
       //{
       //   JOptionPane.showMessageDialog(null,"NF-e não emitida!");
       //   return;
       //}

       String vmCampos = "";
       vmCampos += " PED.*, ITEM.*, NOTA.*, TRA.*, EMP.*, PAR.*, PROD.*, UNID.*, ";
       vmCampos += " CID_EMP.cid_municipio AS CID_EMPRESA,";
       vmCampos += " CID_EMP.cid_uf AS UF_EMPRESA,";
       vmCampos += " CID_EMP.cid_codigo_municipio AS COD_MUN_EMPRESA,";

       vmCampos += " CID_TRA.cid_municipio AS CID_TRANSPORTADORA,";
       vmCampos += " CID_TRA.cid_uf AS UF_TRANSPORTADORA,";
       vmCampos += " CID_TRA.cid_codigo_municipio AS COD_MUN_TRANSPORTADORA,";

       vmCampos += " CID_PAR.cid_municipio AS CID_PARCEIRO,";
       vmCampos += " CID_PAR.cid_uf AS UF_PARCEIRO,";
       vmCampos += " CID_PAR.cid_codigo_municipio AS COD_MUN_PARCEIRO,";

       //if(cbSituacao.getSelectedIndex() != 1)
       //{
           vmCampos += " 1 AS SAIDA";
       //}else
       //{
       //    vmCampos += " 0 AS SAIDA";  //nota de entrada
       //}


       String vmCondicao_Consulta = "";
       vmCondicao_Consulta += " LEFT JOIN item_pedido ITEM   ON (ITEM.item_ped_pedido_codigo_id = PED.Ped_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN NOTA_FISCAL NOTA   ON (NOTA.not_ped_codigo_id = PED.ped_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN TRANSPORTADORAS TRA  ON (TRA.TRAN_CODIGO_ID = NOTA.not_tra_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN EMPRESAS EMP ON (EMP.EMP_CODIGO_ID = PED.ped_emp_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN PARCEIROS PAR ON (PAR.PAR_CODIGO_ID = PED.PED_PAR_CODIGO_ID)";
       vmCondicao_Consulta += " LEFT JOIN PRODUTOS PROD ON (PROD.PROD_CODIGO_ID = ITEM.item_ped_prod_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN CIDADES CID_EMP ON (EMP.emp_cid_codigo_id = CID_EMP.cid_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN CIDADES CID_PAR ON (PAR.par_cidade_comercial_codigo_id = CID_PAR.cid_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN CIDADES CID_TRA ON (TRA.tran_cid_codigo_id = CID_TRA.cid_codigo_id)";
       vmCondicao_Consulta += " LEFT JOIN UNIDADE_DE_MEDIDA UNID ON (UNID.UNID_CODIGO_ID = PROD.prod_unid_codigo_id)";


       vmCondicao_Consulta += " WHERE NOTA.NOT_CODIGO_ID = "  + grDados.getValueAt(grDados.getSelectedRow(), 0).toString();
       try
       {
        rs = AcessoDados.Selecao(" PEDIDOS PED ", vmCampos, vmCondicao_Consulta);

       }catch (Exception e) {
           e.printStackTrace();
       }
           HashMap map = new HashMap();
        try
        {

        String Fatura = "";
        rsTitulos = AcessoDados.Selecao(" CONTAS_RECEBER ", "*" , "WHERE CR_NOTA_FISCAL = " + grDados.getValueAt(grDados.getSelectedRow(), 0).toString());
        while(rsTitulos.next())
        {
            Fatura +=  "DUP: " + rsTitulos.getString("cr_documento")+"/"+ rsTitulos.getString("cr_parcela") + " VENC.: " + funcoes.formataData(rsTitulos.getString("cr_data_vencimento")) + " - " + funcoes.formataMoeda(rsTitulos.getString("cr_valor_documento"),"BD") + " | ";
        }


        map.put("pFatura", Fatura );
        String caminho = getClass().getResource("/Imagens/Logo.jpg").toString();
        map.put("pLogo", caminho);

        JasperReport jr = (JasperReport) JRLoader.loadObject(getClass().getClassLoader().getResource("Relatorios/DANFE.jasper"));
        JRResultSetDataSource jrRS1 = new JRResultSetDataSource(rs);
        //JasperReport jr = (JasperReport) JRLoader.loadObject(arquivo);

        JasperPrint jp = JasperFillManager.fillReport(jr, map,jrRS1);
        JasperViewer jv = new JasperViewer(jp,false);
        JDialog viewer = new  JDialog(jv, true);
        viewer.setSize(1000,700);
        viewer.setLocationRelativeTo(null);
        viewer.getContentPane().add(jv.getContentPane());
        viewer.setVisible(true);

          }catch (Exception e) {
           e.printStackTrace();
        }

   }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCartaCorrecao;
    private javax.swing.JButton btnConsultarStatus;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnRetorno;
    private javax.swing.JButton btnSair;
    private javax.swing.JTable grDados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbLote;
    private javax.swing.JCheckBox nfNormal;
    private javax.swing.JCheckBox nfSCAN;
    private javax.swing.JCheckBox rAutorizadas;
    private javax.swing.JCheckBox rCanceladas;
    private javax.swing.JCheckBox rPendentes;
    // End of variables declaration//GEN-END:variables

}
